const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('Missing Supabase environment variables');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function checkVulnerabilityLinks() {
  console.log('Checking vulnerability-OFC links...\n');

  try {
    // Get some vulnerabilities
    const { data: vulnerabilities, error: vulnError } = await supabase
      .from('vulnerabilities')
      .select('id, discipline, sector, vulnerability')
      .limit(5);

    if (vulnError) {
      console.error('Error fetching vulnerabilities:', vulnError);
      return;
    }

    console.log('Sample vulnerabilities:');
    console.log(JSON.stringify(vulnerabilities, null, 2));

    // Check if any of these vulnerabilities have OFC links
    for (const vuln of vulnerabilities) {
      const { data: links, error: linksError } = await supabase
        .from('vulnerability_ofc_links')
        .select('*')
        .eq('vulnerability_id', vuln.id);

      if (linksError) {
        console.error(`Error fetching links for ${vuln.id}:`, linksError);
        continue;
      }

      console.log(`\nVulnerability ${vuln.id} (${vuln.discipline}):`);
      console.log(`  Links found: ${links.length}`);
      if (links.length > 0) {
        console.log(`  First link:`, JSON.stringify(links[0], null, 2));
      }
    }

  } catch (error) {
    console.error('Error checking vulnerability links:', error);
  }
}

checkVulnerabilityLinks();


