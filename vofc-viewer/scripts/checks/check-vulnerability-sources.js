// Check if vulnerabilities need their sources restored
const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = 'https://wivohgbuuwxoyfyzntsd.supabase.co';
const supabaseServiceKey = 'sb_secret_o6CXg_vuAGMAvnnsfgNDqw_9ZQoQyUk';

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function checkVulnerabilitySources() {
  console.log('🔍 Checking vulnerability sources...');
  
  // Check if there's a vulnerability_sources table
  try {
    const { data: vulnSources, error } = await supabase
      .from('vulnerability_sources')
      .select('*')
      .limit(5);
    
    if (error) {
      console.log('❌ vulnerability_sources table not found or error:', error.message);
    } else {
      console.log(`✅ vulnerability_sources table exists with ${vulnSources.length} records`);
      console.log('Sample:', vulnSources[0]);
    }
  } catch (err) {
    console.log('❌ vulnerability_sources table not accessible:', err.message);
  }
  
  // Check current vulnerabilities
  const { data: vulnerabilities, error } = await supabase
    .from('vulnerabilities')
    .select('*')
    .limit(10);
  
  if (error) {
    console.error('Error fetching vulnerabilities:', error);
    return;
  }
  
  console.log(`\n📊 Current vulnerabilities (${vulnerabilities.length}):`);
  const withSources = vulnerabilities.filter(v => v.source);
  const withNullSources = vulnerabilities.filter(v => v.source === null);
  
  console.log(`  - With sources: ${withSources.length}`);
  console.log(`  - With null sources: ${withNullSources.length}`);
  
  if (withSources.length > 0) {
    console.log('Sample with sources:', withSources[0].source);
  }
  
  if (withNullSources.length > 0) {
    console.log('Sample with null sources:', withNullSources[0].id);
  }
}

checkVulnerabilitySources();







