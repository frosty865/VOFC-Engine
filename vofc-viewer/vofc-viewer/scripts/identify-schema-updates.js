const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');
const path = require('path');

// Load environment variables
require('dotenv').config({ path: './.env' });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function identifySchemaUpdates() {
  console.log('üîç IDENTIFYING SCHEMA UPDATES NEEDED...\n');

  try {
    // Get current schema structure
    const tablesToCheck = [
      'vofc_users',
      'vulnerabilities', 
      'options_for_consideration',
      'assessment_questions',
      'sources',
      'sectors',
      'subsectors'
    ];

    const currentSchema = {};

    for (const tableName of tablesToCheck) {
      try {
        const { data: sampleData, error } = await supabase
          .from(tableName)
          .select('*')
          .limit(1);

        if (!error && sampleData && sampleData.length > 0) {
          currentSchema[tableName] = Object.keys(sampleData[0]);
        }
      } catch (err) {
        console.log(`‚ùå Could not analyze ${tableName}: ${err.message}`);
      }
    }

    console.log('üìä CURRENT SCHEMA STRUCTURE:');
    Object.entries(currentSchema).forEach(([table, columns]) => {
      console.log(`\nüìã ${table}:`);
      columns.forEach(col => console.log(`   ‚Ä¢ ${col}`));
    });

    // Identify key changes needed
    console.log('\nüéØ IDENTIFIED SCHEMA CHANGES:');
    
    console.log('\nüìã TABLE NAME CHANGES:');
    console.log('   ‚Ä¢ "ofcs" ‚Üí "options_for_consideration" (already correct)');
    console.log('   ‚Ä¢ "questions" ‚Üí "assessment_questions" (for assessment questions)');
    
    console.log('\nüìã COLUMN NAME CHANGES:');
    console.log('   ‚Ä¢ vulnerabilities:');
    console.log('     - "vulnerability_name" ‚Üí "vulnerability"');
    console.log('     - "vulnerability_id" ‚Üí "id"');
    console.log('   ‚Ä¢ options_for_consideration:');
    console.log('     - "ofc_id" ‚Üí "id"');
    console.log('     - "ofc_text" ‚Üí "option_text"');
    console.log('   ‚Ä¢ sources:');
    console.log('     - "id" ‚Üí "reference number" (for primary key)');
    console.log('     - "title" ‚Üí "source"');
    console.log('   ‚Ä¢ sectors:');
    console.log('     - "sector_id" ‚Üí "id"');
    console.log('     - "sector_name" ‚Üí "sector_name" (unchanged)');
    console.log('   ‚Ä¢ subsectors:');
    console.log('     - "subsector_id" ‚Üí "id"');
    console.log('     - "subsector_name" ‚Üí "name"');

    console.log('\nüìã FILES THAT NEED UPDATING:');
    
    // Check specific files that likely need updates
    const filesToCheck = [
      'vofc-viewer/app/api/submissions/[id]/approve/route.js',
      'vofc-viewer/app/api/sources/assign-citation/route.js',
      'vofc-viewer/app/admin/ofcs/page.jsx',
      'vofc-viewer/app/api/admin/ofcs/route.js',
      'vofc-viewer/app/lib/fetchVOFC.js',
      'vofc-viewer/app/components/OFCCard.jsx',
      'vofc-viewer/app/vulnerabilities/page.jsx',
      'vofc-viewer/app/submit/page.jsx'
    ];

    filesToCheck.forEach(file => {
      if (fs.existsSync(file)) {
        console.log(`   ‚úÖ ${file}`);
      } else {
        console.log(`   ‚ùå ${file} (not found)`);
      }
    });

    console.log('\nüîß RECOMMENDED UPDATE STRATEGY:');
    console.log('   1. Update API endpoints first');
    console.log('   2. Update frontend components');
    console.log('   3. Update utility functions');
    console.log('   4. Update scripts');
    console.log('   5. Test all functionality');

    console.log('\nüìã SPECIFIC CHANGES NEEDED:');
    
    // Generate specific update recommendations
    console.log('\nüîß API ENDPOINTS TO UPDATE:');
    console.log('   ‚Ä¢ /api/submissions/[id]/approve/route.js');
    console.log('     - Update table references');
    console.log('     - Update column references');
    console.log('   ‚Ä¢ /api/admin/ofcs/route.js');
    console.log('     - Update table name: ofcs ‚Üí options_for_consideration');
    console.log('     - Update column names');
    console.log('   ‚Ä¢ /api/sources/assign-citation/route.js');
    console.log('     - Update column references');

    console.log('\nüîß FRONTEND COMPONENTS TO UPDATE:');
    console.log('   ‚Ä¢ app/admin/ofcs/page.jsx');
    console.log('     - Update table references');
    console.log('     - Update field mappings');
    console.log('   ‚Ä¢ app/components/OFCCard.jsx');
    console.log('     - Update field references');
    console.log('   ‚Ä¢ app/vulnerabilities/page.jsx');
    console.log('     - Update table and column references');

    console.log('\nüîß UTILITY FUNCTIONS TO UPDATE:');
    console.log('   ‚Ä¢ app/lib/fetchVOFC.js');
    console.log('     - Update all table and column references');

  } catch (error) {
    console.error('‚ùå Error identifying schema updates:', error);
  }
}

if (require.main === module) {
  identifySchemaUpdates()
    .then(() => {
      console.log('\n‚úÖ Schema update identification completed!');
      process.exit(0);
    })
    .catch(error => {
      console.error('‚ùå Script error:', error);
      process.exit(1);
    });
}

