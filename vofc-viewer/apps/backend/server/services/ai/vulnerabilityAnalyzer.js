import { ollamaChat } from '../../adapters/ollamaClient.js';

/**
 * AI-powered vulnerability analysis tools
 * Connects to your personal Ollama server for analysis
 */

/**
 * Analyze a vulnerability for completeness and suggest improvements
 */
export async function analyzeVulnerability(vulnerabilityText, discipline) {
  const prompt = `
You are a security expert analyzing a vulnerability statement. Review the following vulnerability for:

1. Clarity and specificity
2. Missing technical details
3. Potential improvements for better understanding
4. Alignment with ${discipline} best practices

Vulnerability: "${vulnerabilityText}"
Discipline: ${discipline}

Provide analysis in JSON format:
{
  "clarity_score": 1-10,
  "specificity_score": 1-10,
  "improvements": ["suggestion1", "suggestion2"],
  "enhanced_text": "improved vulnerability text",
  "technical_details": ["detail1", "detail2"]
}
`;

  try {
    const response = await ollamaChat([
      { role: "user", content: prompt }
    ], { json: true });

    return {
      success: true,
      analysis: response,
      timestamp: new Date().toISOString()
    };
  } catch (error) {
    console.error('Vulnerability analysis error:', error);
    return {
      success: false,
      error: error.message,
      timestamp: new Date().toISOString()
    };
  }
}

/**
 * Generate new vulnerabilities based on sector and context
 */
export async function generateVulnerabilities(sector, context, count = 3) {
  const prompt = `
You are a security expert specializing in ${sector} vulnerabilities. 
Generate ${count} realistic, specific vulnerabilities that could occur in this sector.

Context: ${context}

For each vulnerability, provide:
1. A clear, specific vulnerability statement
2. The most appropriate discipline category
3. Why this vulnerability is relevant to ${sector}

Return JSON format:
{
  "vulnerabilities": [
    {
      "vulnerability": "specific vulnerability text",
      "discipline": "appropriate discipline",
      "rationale": "why this is relevant to the sector"
    }
  ]
}
`;

  try {
    const response = await ollamaChat([
      { role: "user", content: prompt }
    ], { json: true });

    return {
      success: true,
      vulnerabilities: response.vulnerabilities || [],
      timestamp: new Date().toISOString()
    };
  } catch (error) {
    console.error('Vulnerability generation error:', error);
    return {
      success: false,
      error: error.message,
      timestamp: new Date().toISOString()
    };
  }
}

/**
 * Analyze OFC quality and suggest improvements
 */
export async function analyzeOFC(optionText, vulnerabilityContext) {
  const prompt = `
You are a security expert reviewing an Option for Consideration (OFC).

OFC Text: "${optionText}"
Vulnerability Context: "${vulnerabilityContext}"

Analyze this OFC for:
1. Actionability and specificity
2. Technical accuracy
3. Implementation feasibility
4. Alignment with the vulnerability
5. Missing technical details

Provide analysis in JSON format:
{
  "actionability_score": 1-10,
  "technical_score": 1-10,
  "feasibility_score": 1-10,
  "improvements": ["improvement1", "improvement2"],
  "enhanced_text": "improved OFC text",
  "implementation_steps": ["step1", "step2", "step3"]
}
`;

  try {
    const response = await ollamaChat([
      { role: "user", content: prompt }
    ], { json: true });

    return {
      success: true,
      analysis: response,
      timestamp: new Date().toISOString()
    };
  } catch (error) {
    console.error('OFC analysis error:', error);
    return {
      success: false,
      error: error.message,
      timestamp: new Date().toISOString()
    };
  }
}

/**
 * Generate new OFCs for a specific vulnerability
 */
export async function generateOFCs(vulnerabilityText, discipline, count = 3) {
  const prompt = `
You are a security expert providing Options for Consideration (OFCs) for a vulnerability.

Vulnerability: "${vulnerabilityText}"
Discipline: ${discipline}

Generate ${count} specific, actionable OFCs that address this vulnerability.
Each OFC should be:
1. Specific and actionable
2. Technically sound
3. Appropriate for the discipline
4. Implementation-focused

Return JSON format:
{
  "ofcs": [
    {
      "option_text": "specific actionable OFC text",
      "priority": "high/medium/low",
      "implementation_difficulty": "easy/medium/complex",
      "estimated_cost": "low/medium/high"
    }
  ]
}
`;

  try {
    const response = await ollamaChat([
      { role: "user", content: prompt }
    ], { json: true });

    return {
      success: true,
      ofcs: response.ofcs || [],
      timestamp: new Date().toISOString()
    };
  } catch (error) {
    console.error('OFC generation error:', error);
    return {
      success: false,
      error: error.message,
      timestamp: new Date().toISOString()
    };
  }
}

/**
 * Test Ollama server connection
 */
export async function testOllamaConnection() {
  const prompt = "Respond with 'Ollama connection successful' and nothing else.";
  
  try {
    const response = await ollamaChat([
      { role: "user", content: prompt }
    ]);
    
    return {
      success: true,
      response: response,
      timestamp: new Date().toISOString()
    };
  } catch (error) {
    console.error('Ollama connection test failed:', error);
    return {
      success: false,
      error: error.message,
      timestamp: new Date().toISOString()
    };
  }
}
