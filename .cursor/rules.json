{
  "project_info": {
    "name": "VOFC Engine",
    "type": "Next.js Application with Supabase",
    "main_directory": "vofc-viewer",
    "database": "Supabase PostgreSQL",
    "last_updated": "2024-12-19"
  },
  "database_schema": {
    "core_tables": {
      "sources": {
        "id": "uuid primary key",
        "reference_number": "integer unique",
        "source_text": "text",
        "title": "text",
        "author": "text",
        "organization": "text",
        "document_type": "text",
        "created_at": "timestamptz",
        "updated_at": "timestamptz"
      },
      "options_for_consideration": {
        "id": "uuid primary key",
        "option_text": "text",
        "discipline": "text",
        "sector_id": "uuid",
        "subsector_id": "uuid",
        "vulnerability_id": "uuid",
        "created_at": "timestamptz",
        "updated_at": "timestamptz"
      },
      "vulnerabilities": {
        "id": "uuid primary key",
        "vulnerability_name": "text",
        "description": "text",
        "discipline": "text",
        "sector_id": "uuid",
        "subsector_id": "uuid",
        "created_at": "timestamptz",
        "updated_at": "timestamptz"
      },
      "ofc_sources": {
        "id": "uuid primary key",
        "ofc_id": "uuid references options_for_consideration(id)",
        "source_id": "uuid references sources(id)",
        "page_number": "integer",
        "section": "text",
        "quote": "text",
        "created_at": "timestamptz",
        "unique_pair": "(ofc_id, source_id)"
      },
      "vulnerability_sources": {
        "id": "uuid primary key",
        "vulnerability_id": "uuid references vulnerabilities(id)",
        "source_id": "uuid references sources(id)",
        "page_number": "integer",
        "section": "text",
        "quote": "text",
        "created_at": "timestamptz",
        "unique_pair": "(vulnerability_id, source_id)"
      }
    },
    "linking_tables": {
      "vulnerability_ofc_links": "Links vulnerabilities to OFCs",
      "ofc_sources": "Links OFCs to source references",
      "vulnerability_sources": "Links vulnerabilities to source references"
    },
    "views": {
      "ofcs_with_sources": "OFCs with aggregated source information",
      "vulnerabilities_with_ofcs": "Vulnerabilities with OFC counts and IDs"
    },
    "functions": {
      "get_ofcs_with_sources()": "Returns OFCs with source data",
      "get_vulnerabilities_with_ofcs()": "Returns vulnerabilities with OFC data"
    }
  },
  "api_functions": {
    "core_data": {
      "fetchVOFC()": "Get OFCs with sources using relationship query",
      "fetchVulnerabilities()": "Get vulnerabilities with OFCs",
      "fetchSubsectors()": "Get all subsectors",
      "fetchSectors()": "Get all sectors",
      "getOFCsForVulnerability(vulnerabilityId)": "Get OFCs for specific vulnerability"
    },
    "citation_management": {
      "linkOFCtoSource(ofcId, referenceNumber)": "Link OFC to source by reference number",
      "unlinkOFCSource(ofcId, referenceNumber)": "Unlink OFC from source",
      "fetchSourcesForOFC(ofcId)": "Get all sources for a specific OFC",
      "resolveCitations(ofcId, optionText)": "Auto-resolve [cite: #] patterns in text",
      "resolveCitationsForOFC(ofc)": "Shortcut: resolveCitations(ofc.id, ofc.option_text)",
      "resolveCitationsBatch(ofcs)": "Batch process multiple OFCs for citations"
    },
    "ai_services": {
      "discoverNewVOFC(sector, inputText)": "AI-powered discovery of new vulnerabilities/OFCs using GPT-5",
      "enhanceOFC(ofcId)": "AI-powered OFC text enhancement and citation suggestions"
    }
  },
  "file_structure": {
    "main_app": "vofc-viewer/app/",
    "api_routes": "vofc-viewer/app/api/",
    "components": "vofc-viewer/components/",
    "frontend_lib": "vofc-viewer/app/lib/",
    "backend_lib": "vofc-viewer/lib/",
    "backend_services": "vofc-viewer/apps/backend/server/services/VOFC/",
    "ai_services": "vofc-viewer/apps/backend/server/services/VOFC/",
    "database_schema": "vofc-viewer/sql/",
    "scripts": "vofc-viewer/scripts/",
    "supabase_config": "vofc-viewer/supabase/",
    "tools": "Tools/"
  },
  "rules": {
    "citations": {
      "pattern": "\\[cite: [0-9, ]+\\]",
      "validation": "Each cited number must exist in sources.reference_number",
      "linking": "Map [cite: #] → sources.id via reference_number → ofc_sources.source_id"
    },
    "database_queries": {
      "use_relationships": "Prefer Supabase relationship queries over manual joins",
      "error_handling": "Always handle Supabase errors with proper error messages",
      "rls_policies": "All tables have RLS enabled with public read, admin write"
    },
    "code_standards": {
      "async_functions": "Use async/await for all database operations",
      "error_throwing": "Throw errors for database failures, return empty arrays for no data",
      "logging": "Include console.log for debugging database operations"
    },
    "ui_style": {
      "description": "CISA Official Design Guide (2024) – applied to VOFC Engine modules.",
      "enforce": true,
      "theme_source": "c5205722-7fd9-4baa-9e2c-4572ca75c0d4.css",
      "color_usage": {
        "primary": "#112e51",
        "primary_light": "#205493",
        "primary_lighter": "#0071bc",
        "accent": "#C9B037",
        "danger": "#d83933",
        "warning": "#ffc107",
        "success": "#28a745",
        "info": "#17a2b8",
        "neutral_dark": "#5b616b",
        "neutral_light": "#f1f1f2"
      },
      "typography": {
        "font_base": "Source Sans Pro, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, sans-serif",
        "heading_scale": ["32px", "24px", "18px", "16px"],
        "weight": {
          "normal": 400,
          "medium": 500,
          "semibold": 600,
          "bold": 700
        }
      },
      "layout": {
        "grid_system": "Responsive up to 1200px width",
        "container_class": "usa-section",
        "header_class": "usa-header",
        "footer_class": "usa-footer",
        "content_spacing": "1rem–3rem variable responsive spacing"
      },
      "components": {
        "buttons": {
          "primary": "usa-button",
          "secondary": "usa-button usa-button--outline",
          "accent": "usa-button usa-button--accent-cool",
          "disabled": "usa-button usa-button--disabled"
        },
        "alerts": {
          "info": "usa-alert usa-alert--info",
          "warning": "usa-alert usa-alert--warning",
          "success": "usa-alert usa-alert--success",
          "error": "usa-alert usa-alert--error"
        },
        "forms": {
          "group": "usa-form-group",
          "label": "usa-label",
          "input": "usa-input",
          "select": "usa-select",
          "textarea": "usa-textarea"
        },
        "cards": {
          "base": "usa-card",
          "header": "usa-card__header",
          "body": "usa-card__body",
          "footer": "usa-card__footer"
        },
        "tables": {
          "base": "usa-table",
          "striped": "usa-table--striped",
          "borderless": "usa-table--borderless"
        },
        "banners": {
          "base": "cisa-banner",
          "tlp_variants": {
            "white": "banner-tlp-white",
            "green": "banner-tlp-green",
            "amber": "banner-tlp-amber",
            "red": "banner-tlp-red",
            "black": "banner-tlp-black"
          }
        }
      },
      "accessibility": {
        "contrast_ratio": ">= 4.5:1",
        "keyboard_navigation": true,
        "focus_ring": "outline: 2px solid #0071bc",
        "font_scaling": "up to 200%",
        "high_contrast_mode": "supported"
      },
      "branding": {
        "header_logo": "CISA or DHS Seal left-aligned",
        "footer_disclaimer": "Official U.S. Department of Homeland Security system. Authorized use only."
      },
      "print_guidelines": {
        "page_size": "Letter / A4",
        "safe_margin": "0.5in",
        "avoid_page_break": "headers, sections, tables"
      }
    }
  },
  "environment": {
    "supabase_url": "NEXT_PUBLIC_SUPABASE_URL",
    "supabase_anon_key": "NEXT_PUBLIC_SUPABASE_ANON_KEY",
    "service_role": "Used for admin operations bypassing RLS",
    "openai_api_key": "OPENAI_API_KEY",
    "ai_model": "gpt-5"
  },
  "ai_context": {
    "context_file": ".cursor/ai-context.md",
    "schema_docs": ".cursor/supabase-schema.md",
    "last_regenerated": "2024-12-19",
    "purpose": "Comprehensive project state and development guidelines for AI assistance"
  },
  "ai_services": {
    "resolveCitations": "Parses [cite: #] and links OFCs to sources.",
    "enhanceOFC": "Uses AI to improve OFC clarity and add missing citations.",
    "discoverNewVOFC": "Extracts new vulnerabilities and OFCs from input text."
  },
  "api_endpoints": {
    "enhance": "/api/ai/enhance/:ofcId",
    "resolve": "/api/ai/resolve/:ofcId",
    "discover": "/api/ai/discover/:sector"
  },
  "intent": {
    "on_save": "call /api/ai/resolve/:ofcId",
    "on_new_vofc": "call /api/ai/discover/:sector"
  },
  "function_organization": {
    "status": "CLEAN - No duplicates or orphaned functions",
    "frontend_lib": {
      "location": "vofc-viewer/app/lib/",
      "functions": [
        "fetchVOFC() - Main data fetching with vulnerability_id",
        "fetchVulnerabilities() - Vulnerability data with proper fields",
        "fetchSectors() - All sectors",
        "fetchSubsectors() - All subsectors", 
        "fetchSubsectorsBySector() - Subsectors by sector ID",
        "linkOFCtoSource() - Link OFCs to sources",
        "getOFCsForVulnerability() - Get OFCs for specific vulnerability",
        "auth.js - Authentication functions",
        "supabaseClient.js - Supabase client",
        "useSessionTimeout.js - Session timeout hook",
        "questions.js - Assessment questions"
      ]
    },
    "backend_lib": {
      "location": "vofc-viewer/lib/",
      "functions": [
        "auth-middleware.js - API authentication",
        "auth-server.js - Server-side auth service", 
        "auth-client.js - Client-side auth utilities",
        "monitoring.js - System monitoring",
        "security.js - Security utilities",
        "error-handler.js - Error handling",
        "database-backup.js - Database backup"
      ]
    },
    "cleanup_completed": {
      "removed_duplicates": [
        "vofc-viewer/lib/questions.js (duplicate)",
        "vofc-viewer/lib/supabaseClient.js (duplicate)",
        "vofc-viewer/lib/useSessionTimeout.js (duplicate)",
        "vofc-viewer/app/lib/fetchOFCFixed.js (deprecated)",
        "vofc-viewer/app/lib/test-supabase.js (test file)"
      ],
      "fixed_imports": [
        "SessionTimeoutWarning.jsx import path",
        "useSessionTimeout.js internal import",
        "Relative paths in admin pages",
        "Bulk submission page imports"
      ]
    }
  }
}
# === VOFC Engine - Cursor Assistant Rules ===
# Purpose: Ensure consistent schema validation, Supabase table relationships, and import correctness.

name: "VOFC Engine Schema & Relationship Rules"

description: >
  These rules help Cursor understand how to automatically verify database relationships,
  validate Supabase queries, and maintain consistent schema structure across all modules
  of the VOFC Engine (Frontend, API, and Supabase backend).

rules:
  - name: Schema Awareness
    trigger: ["supabase", "schema.sql", "supabase.types.ts", "database", "db"]
    actions:
      - Always load `schema.sql` or `supabase.types.ts` into context when analyzing backend code.
      - When reviewing API or DB code, cross-check table names and foreign keys against schema.
      - Warn if a referenced table, field, or relation does not exist in schema.
      - Suggest missing foreign key constraints in SQL if a logical link (e.g., filename, id) exists across tables.

  - name: Supabase Query Validation
    trigger: ["supabase.from", "supabase.select", "supabase.insert", "supabase.update"]
    actions:
      - Ensure all column names match those defined in schema.sql or supabase.types.ts.
      - If a query uses join-like logic, verify that a corresponding relationship exists in schema.
      - Warn when unindexed columns are used in frequent lookups or filters.

  - name: Relationship Mapping
    trigger: ["relationship", "foreign key", "join", "link"]
    actions:
      - Reference the following known relationships:
        - document_processing.filename ↔ submissions.filename
        - learning_events.filename ↔ document_processing.filename
        - learning_stats.event_id ↔ learning_events.id
        - ofc_sources.ofc_id ↔ options_for_consideration.id
        - ofc_sources.source_id ↔ sources.reference_number
      - Suggest appropriate SQL `FOREIGN KEY` constraints or Supabase policies if missing.

  - name: API Consistency
    trigger: ["/api/documents", "route.js", "handler.js"]
    actions:
      - Verify endpoint paths correspond to backend service modules (e.g., /api/documents/submit ↔ submit.js).
      - Check that all API responses return valid status and JSON structures.
      - Flag redundant or conflicting routes (e.g., process vs process-batch).

  - name: Frontend-Backend Linking
    trigger: [".jsx", ".tsx", "DocumentProcessor", "PSASubmission"]
    actions:
      - Ensure frontend calls match valid API routes and required parameters.
      - Cross-check expected return shapes against backend response JSON.
      - Verify data binding to UI elements (e.g., document status, error messages).

  - name: Data Integrity & Validation
    trigger: ["validate", "error", "status"]
    actions:
      - Ensure consistent `status` enums across system: pending, processing, completed, failed.
      - Validate consistent use of `filename` or `id` across tables.
      - Warn when duplicate or non-unique identifiers are used where a unique constraint should exist.

  - name: Heuristic Pipeline Awareness
    trigger: ["ollama", "learning", "event", "heuristic"]
    actions:
      - Cross-check learning_events and learning_stats updates for schema consistency.
      - Verify that heuristic outputs are inserted as JSONB with expected keys.
      - Ensure event triggers do not violate RLS or foreign key constraints.

  - name: Developer Guidance
    actions:
      - When asked to “check links,” “verify relationships,” or “trace data flow,”
        automatically load all files in `/api/documents/`, `/lib/`, and `/db/`.
      - Visualize relationships as text-based graph if possible.
      - When inconsistencies exist, suggest SQL ALTER statements or migration patches.
