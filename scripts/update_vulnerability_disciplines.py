#!/usr/bin/env python3
"""
Update vulnerabilities with discipline IDs based on content analysis
"""

import os
import sys
from supabase import create_client, Client
import re
from collections import defaultdict

def get_supabase_client():
    """Get Supabase client"""
    url = os.getenv('SUPABASE_URL') or os.getenv('NEXT_PUBLIC_SUPABASE_URL')
    key = os.getenv('SUPABASE_SERVICE_ROLE_KEY') or os.getenv('NEXT_PUBLIC_SUPABASE_ANON_KEY')
    
    if not url or not key:
        print("Missing Supabase credentials")
        return None
    
    return create_client(url, key)

def get_discipline_mapping():
    """Get mapping of keywords to disciplines"""
    return {
        # Physical Security Keywords
        'Physical Security': [
            'physical', 'facility', 'building', 'premises', 'site', 'location',
            'guard', 'security guard', 'patrol', 'watch', 'monitor', 'observe',
            'access control', 'entry', 'exit', 'door', 'gate', 'barrier', 'fence',
            'perimeter', 'boundary', 'surveillance', 'camera', 'cctv', 'alarm',
            'emergency', 'evacuation', 'response', 'incident', 'threat',
            'visitor', 'guest', 'badge', 'identification', 'credential',
            'asset', 'property', 'equipment', 'inventory', 'theft', 'vandalism',
            'lock', 'key', 'card', 'biometric', 'security force', 'personnel'
        ],
        
        # Cybersecurity Keywords
        'Cybersecurity': [
            'cyber', 'digital', 'computer', 'system', 'network', 'internet',
            'data', 'information', 'database', 'server', 'software', 'application',
            'password', 'authentication', 'authorization', 'login', 'access',
            'firewall', 'encryption', 'security patch', 'vulnerability', 'exploit',
            'malware', 'virus', 'phishing', 'hacking', 'breach', 'intrusion',
            'monitoring', 'logging', 'audit', 'compliance', 'policy',
            'it system', 'information technology', 'cyber security'
        ],
        
        # Network Security Keywords
        'Network Security': [
            'network', 'infrastructure', 'router', 'switch', 'firewall',
            'wireless', 'wifi', 'ethernet', 'protocol', 'traffic', 'bandwidth',
            'connection', 'connectivity', 'dns', 'ip', 'tcp', 'udp',
            'network security', 'network infrastructure'
        ],
        
        # Data Protection Keywords
        'Data Protection': [
            'data', 'information', 'privacy', 'confidential', 'sensitive',
            'personal', 'pii', 'encryption', 'backup', 'storage', 'retention',
            'classification', 'handling', 'disposal', 'gdpr', 'compliance',
            'data security', 'data protection', 'information security'
        ],
        
        # Identity Management Keywords
        'Identity Management': [
            'identity', 'user', 'account', 'authentication', 'authorization',
            'credential', 'password', 'login', 'access', 'permission', 'role',
            'privilege', 'single sign-on', 'sso', 'mfa', 'multi-factor',
            'identity management', 'user management', 'access management'
        ],
        
        # Incident Response Keywords
        'Incident Response': [
            'incident', 'response', 'emergency', 'crisis', 'breach', 'attack',
            'threat', 'alert', 'notification', 'escalation', 'recovery',
            'forensics', 'investigation', 'analysis', 'containment',
            'incident response', 'emergency response', 'crisis management'
        ],
        
        # Security Awareness Keywords
        'Security Awareness': [
            'training', 'education', 'awareness', 'user', 'personnel', 'staff',
            'phishing', 'social engineering', 'human', 'behavior', 'culture',
            'policy', 'procedure', 'guideline', 'best practice',
            'security awareness', 'security training', 'user education'
        ],
        
        # Vulnerability Management Keywords
        'Vulnerability Management': [
            'vulnerability', 'patch', 'update', 'fix', 'remediation', 'mitigation',
            'assessment', 'scan', 'test', 'penetration', 'pen test', 'audit',
            'risk', 'threat', 'exposure', 'weakness', 'flaw',
            'vulnerability management', 'patch management', 'security assessment'
        ],
        
        # Security Operations Keywords
        'Security Operations': [
            'operations', 'soc', 'monitoring', 'alert', 'detection', 'analysis',
            'log', 'siem', 'correlation', 'investigation', 'response',
            'analyst', 'operator', 'center', 'command',
            'security operations', 'security monitoring', 'soc'
        ],
        
        # Security Management Keywords
        'Security Management': [
            'management', 'program', 'governance', 'strategy', 'planning',
            'budget', 'resource', 'staffing', 'organization', 'structure',
            'leadership', 'executive', 'director', 'manager', 'supervisor',
            'security management', 'security program', 'security governance'
        ],
        
        # Risk Management Keywords
        'Risk Management': [
            'risk', 'assessment', 'analysis', 'evaluation', 'mitigation',
            'acceptance', 'transfer', 'avoidance', 'reduction', 'control',
            'threat', 'vulnerability', 'impact', 'likelihood', 'probability',
            'risk management', 'risk assessment', 'risk analysis'
        ],
        
        # Compliance Keywords
        'Compliance': [
            'compliance', 'regulatory', 'standard', 'framework', 'requirement',
            'audit', 'assessment', 'certification', 'accreditation', 'control',
            'policy', 'procedure', 'documentation', 'evidence', 'reporting',
            'regulatory compliance', 'standards compliance'
        ],
        
        # Security Architecture Keywords
        'Security Architecture': [
            'architecture', 'design', 'system', 'infrastructure', 'framework',
            'model', 'pattern', 'blueprint', 'specification', 'requirement',
            'integration', 'interoperability', 'standard', 'guideline',
            'security architecture', 'system design', 'infrastructure design'
        ],
        
        # Business Continuity Keywords
        'Business Continuity': [
            'continuity', 'disaster', 'recovery', 'backup', 'redundancy',
            'resilience', 'availability', 'uptime', 'downtime', 'outage',
            'planning', 'preparedness', 'response', 'recovery', 'restoration',
            'business continuity', 'disaster recovery', 'continuity planning'
        ],
        
        # Security Training Keywords
        'Security Training': [
            'training', 'education', 'learning', 'development', 'skill',
            'competency', 'certification', 'qualification', 'workshop',
            'seminar', 'course', 'program', 'curriculum', 'instruction',
            'security training', 'security education', 'training program'
        ],
        
        # Security Assessment Keywords
        'Security Assessment': [
            'assessment', 'evaluation', 'review', 'audit', 'inspection',
            'examination', 'analysis', 'testing', 'validation',
            'verification', 'check', 'survey', 'inquiry', 'investigation',
            'security assessment', 'security evaluation', 'security audit'
        ],
        
        # Security Policy Keywords
        'Security Policy': [
            'policy', 'procedure', 'guideline', 'standard', 'rule',
            'regulation', 'requirement', 'mandate', 'directive', 'instruction',
            'framework', 'governance', 'compliance', 'enforcement', 'violation',
            'security policy', 'security procedure', 'policy development'
        ]
    }

def analyze_vulnerability_text(text):
    """Analyze vulnerability text to determine the best discipline match"""
    if not text:
        return 'General'
    
    text_lower = text.lower()
    
    # Count keyword matches for each discipline
    discipline_scores = defaultdict(int)
    
    for discipline, keywords in get_discipline_mapping().items():
        for keyword in keywords:
            if keyword.lower() in text_lower:
                discipline_scores[discipline] += 1
    
    # Return the discipline with the highest score
    if discipline_scores:
        return max(discipline_scores, key=discipline_scores.get)
    
    return 'General'

def update_vulnerabilities():
    """Update all vulnerabilities with appropriate discipline IDs"""
    supabase = get_supabase_client()
    if not supabase:
        return False
    
    try:
        print("Updating vulnerabilities with discipline IDs...")
        
        # Get all vulnerabilities
        result = supabase.table('vulnerabilities').select('id, vulnerability, discipline').execute()
        
        if not result.data:
            print("No vulnerabilities found")
            return False
        
        print(f"Found {len(result.data)} vulnerabilities to analyze")
        
        # Get all disciplines
        disciplines_result = supabase.table('disciplines').select('id, name').execute()
        discipline_map = {disc['name']: disc['id'] for disc in disciplines_result.data}
        
        updated_count = 0
        analysis_results = defaultdict(list)
        
        for vuln in result.data:
            vuln_text = vuln.get('vulnerability', '')
            suggested_discipline = analyze_vulnerability_text(vuln_text)
            discipline_id = discipline_map.get(suggested_discipline)
            
            if discipline_id:
                # Update the vulnerability with discipline_id
                update_result = supabase.table('vulnerabilities').update({
                    'discipline_id': discipline_id
                }).eq('id', vuln['id']).execute()
                
                if update_result.data:
                    updated_count += 1
                    analysis_results[suggested_discipline].append(vuln['id'])
        
        print(f"\nUpdated {updated_count} vulnerabilities with discipline IDs")
        
        print(f"\nDiscipline distribution:")
        for discipline, vuln_ids in analysis_results.items():
            print(f"  {discipline}: {len(vuln_ids)} vulnerabilities")
        
        return True
        
    except Exception as e:
        print(f"Error updating vulnerabilities: {e}")
        return False

if __name__ == "__main__":
    print("Starting vulnerability discipline updates...")
    
    success = update_vulnerabilities()
    
    if success:
        print("\nVulnerability discipline updates completed successfully!")
    else:
        print("\nFailed to update vulnerability disciplines")
        sys.exit(1)
